1. Вывести список существующих индексов в БД. Являются ли индексы кластеризованными? Какую структуру в памяти они имеют?

select * from pg_indexes where schemaname = 'my_schema';

2. Создать индекс для ускорения сортировки таблицы покупателей по городу. Проверьте, используется ли созданный индекс при сортировке.

create index cust_city_idx on cust(city);

explain analyze select * from cust order by city; проверка

3. Добавьте в таблицу покупателей 1000 новых записей, например, используя команду, формирующую последовательности:
insert into cust values ( generate_series(1, 1000), 'test_name', 100, 'test_city' );
Проверьте, используется ли теперь созданный индекс при сортировке?

explain analyze select * from cust order by city; проверка

В заданиях 4-7 необходимо выполнить одинаковый запрос, сохраняя его содержимое в различных структурах. Полученную (сохраненную) выборку вывести на экран. В чем отличие этих структур?

Вывести полную информацию о заказе, его продавце, его продукте и его покупателе, только если:
        количество товара (amt) в этом заказе больше, чем среднее по таблице,
        товар не из Санкт-Петербурга, 
        продавец совершил не более 10 заказов за все время,
        рейтинг покупателя не ниже, чем хотя бы у одного покупателя из Москвы.  

4. Сохранить результат как новую таблицу и вывести ее содержимое.

-- 4
CREATE TABLE order_analysis AS
SELECT 
    o.onum, o.amt, o.ord_date,
    c.cnum AS customer_id, c.name AS customer_name, c.rating AS customer_rating, c.city AS customer_city,
    p.pnum AS product_id, p.name AS product_name, p.city AS product_city,
    s.snum AS seller_id, s.name AS seller_name, s.city AS seller_city
FROM my_schema.ord o
JOIN my_schema.cust c ON o.cnum = c.cnum
JOIN my_schema.prod p ON o.pnum = p.pnum
JOIN my_schema.sal s ON o.snum = s.snum
WHERE 
    o.amt > (SELECT AVG(amt) FROM my_schema.ord)  -- amt больше среднего
    AND p.city != 'Saint Petersburg'    -- товар не из СПб
    AND o.snum IN (                     -- продавец с <= 10 заказов
        SELECT snum FROM my_schema.ord 
        GROUP BY snum 
        HAVING COUNT(*) <= 10
    )
    AND c.rating >= (SELECT MIN(rating) FROM my_schema.cust WHERE city = 'Moscow');

    SELECT * FROM order_analysis;

5. Сохранить результат как представление и вывести его содержимое.

-- 5
CREATE VIEW order_analysis_view AS
SELECT 
    o.onum, o.amt, o.ord_date,
    c.cnum AS customer_id, c.name AS customer_name, c.rating AS customer_rating, c.city AS customer_city,
    p.pnum AS product_id, p.name AS product_name, p.city AS product_city,
    s.snum AS seller_id, s.name AS seller_name, s.city AS seller_city
FROM my_schema.ord o
JOIN my_schema.cust c ON o.cnum = c.cnum
JOIN my_schema.prod p ON o.pnum = p.pnum
JOIN my_schema.sal s ON o.snum = s.snum
WHERE 
    o.amt > (SELECT AVG(amt) FROM my_schema.ord)  -- amt больше среднего
    AND p.city != 'Saint Petersburg'    -- товар не из СПб
    AND o.snum IN (                     -- продавец с <= 10 заказов
        SELECT snum FROM my_schema.ord 
        GROUP BY snum 
        HAVING COUNT(*) <= 10
    )
    AND c.rating >= (SELECT MIN(rating) FROM my_schema.cust WHERE city = 'Moscow');

    SELECT * FROM order_analysis_view;

6. Сохранить результат как материализованное представление и вывести его содержимое.

-- 6
CREATE MATERIALIZED VIEW order_analysis_materialized AS
SELECT 
    o.onum, o.amt, o.ord_date,
    c.cnum AS customer_id, c.name AS customer_name, c.rating AS customer_rating, c.city AS customer_city,
    p.pnum AS product_id, p.name AS product_name, p.city AS product_city,
    s.snum AS seller_id, s.name AS seller_name, s.city AS seller_city
FROM my_schema.ord o
JOIN my_schema.cust c ON o.cnum = c.cnum
JOIN my_schema.prod p ON o.pnum = p.pnum
JOIN my_schema.sal s ON o.snum = s.snum
WHERE 
    o.amt > (SELECT AVG(amt) FROM my_schema.ord)  -- amt больше среднего
    AND p.city != 'Saint Petersburg'    -- товар не из СПб
    AND o.snum IN (                     -- продавец с <= 10 заказов
        SELECT snum FROM my_schema.ord 
        GROUP BY snum 
        HAVING COUNT(*) <= 10
    )
    AND c.rating >= (SELECT MIN(rating) FROM my_schema.cust WHERE city = 'Moscow');

SELECT * FROM order_analysis_materialized;

7. Использовать для запроса блок оператора WITH и вывести результат.

-- 7
WITH order_analysis_cte AS (
SELECT 
    o.onum, o.amt, o.ord_date,
    c.cnum AS customer_id, c.name AS customer_name, c.rating AS customer_rating, c.city AS customer_city,
    p.pnum AS product_id, p.name AS product_name, p.city AS product_city,
    s.snum AS seller_id, s.name AS seller_name, s.city AS seller_city
FROM my_schema.ord o
JOIN my_schema.cust c ON o.cnum = c.cnum
JOIN my_schema.prod p ON o.pnum = p.pnum
JOIN my_schema.sal s ON o.snum = s.snum
WHERE 
    o.amt > (SELECT AVG(amt) FROM my_schema.ord)  -- amt больше среднего
    AND p.city != 'Saint Petersburg'    -- товар не из СПб
    AND o.snum IN (                     -- продавец с <= 10 заказов
        SELECT snum FROM my_schema.ord 
        GROUP BY snum 
        HAVING COUNT(*) <= 10
    )
    AND c.rating >= (SELECT MIN(rating) FROM my_schema.cust WHERE city = 'Moscow')
)
SELECT * FROM order_analysis_cte;